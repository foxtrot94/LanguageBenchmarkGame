#!/usr/bin/env python

def setup():
    import os, subprocess, datetime
    if os.path.exists(os.path.join(os.getcwd(), "setup.log")):
        print("'setup.log' exists. Rust implementation setup correctly")
        return

    # We can't really setup this successfully, we need a build system like CMake or scons for xplat support
    print("Watch for Errors - Requires Cargo and the Rust toolchain")
    try:
        with open('setup.log', 'w') as logFile:
            logFile.write("# This is an autogenerated file made by 'run.py' on {}\n".format(datetime.datetime.now()))
            logFile.write("# => DO NOT DELETE THIS FILE OR SETUP WILL BE CALLED AGAIN\n")

            logFile.flush()
            subprocess.run(["rustc", "-V"], stdout = logFile, stderr = logFile, check=True)
            subprocess.run(["cargo", "-V"], stdout = logFile, stderr = logFile, check=True)
            subprocess.run(["cargo", "update","-v"], stdout = logFile, stderr = logFile, check=True)
            logFile.flush()

            logFile.write("\n# Setup completed on {}".format(datetime.datetime.now()))
        #end logFile
    except Exception as e:
        print(e)
        if os.path.exists('setup.log'):
            os.remove('setup.log')
#end run

def build():
    import subprocess
    retcode = subprocess.call(['cargo', 'build', '--release'])
    if retcode != 0:
        raise AssertionError("Build failed")
    print("Successfully built Rust implementation")
#end run

def run(cmd_args):
    import subprocess

    # We won't call 'cargo run' here to avoid the overhead
    process_args = ['./target/release/rust'] + cmd_args
    retcode = subprocess.call(process_args)
    if retcode != 0:
        raise RuntimeError("Program run returned non-zero exit code")
#end run

if __name__=="__main__":
    import sys, os
    
    setup()
    build()
    if os.path.basename(sys.argv[0]) == os.path.basename(__file__):
        run(sys.argv[1:])
# end main
        