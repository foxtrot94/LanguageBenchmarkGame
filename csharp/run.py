#!/usr/bin/env python

def setup():
    import os, subprocess, datetime
    if os.path.exists(os.path.join(os.getcwd(), "setup.log")):
        print("'setup.log' exists. C# implementation setup correctly")
        return

    # We can't really setup this successfully, we need a build system like CMake or scons for xplat support
    print("Need to install dotnet-sdk and have 'dotnet' as a command")
    with open('setup.log', 'w') as logFile:
        logFile.write("# This is an autogenerated file made by 'run.py' on {}\n".format(datetime.datetime.now()))
        logFile.write("# => DO NOT DELETE THIS FILE OR SETUP WILL BE CALLED AGAIN\n")

        logFile.flush()
        subprocess.call(['dotnet', '--info'], stdout = logFile, stderr = logFile)
        subprocess.call(["dotnet", "restore"], stdout = logFile, stderr = logFile)
        logFile.flush()

        logFile.write("\n# Setup completed on {}".format(datetime.datetime.now()))
    #end logFile
#end run

def build():
    import subprocess
    subprocess.call(['dotnet', 'restore'])
    subprocess.call(['dotnet', 'build', '-c', 'Release'])
#end run

def run(cmd_args):
    import subprocess
    process_args = ['dotnet', 'run', '-c', 'Release', '--no-build', '--no-restore', '--'] + cmd_args
    retcode = subprocess.call(process_args)
    if retcode != 0:
        raise RuntimeError("Program run returned non-zero exit code")
#end run

if __name__=="__main__":
    import sys, os

    if os.path.basename(sys.argv[0]) == __file__:
        run(sys.argv[1:])
# end main
        