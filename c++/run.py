#!/usr/bin/env python

output_file_name = 'cpp.out'

def setup():
    import os, subprocess, datetime
    if os.path.exists(os.path.join(os.getcwd(), "setup.log")):
        print("'setup.log' exists. C++ implementation setup correctly")
        return

    # We can't really setup this successfully, we need a build system like CMake or scons for xplat support
    print("Need to install libboost-filesystem-dev libcrypto++-dev libcrypto++9v5")
    with open('setup.log', 'w') as logFile:
        logFile.write("# This is an autogenerated file made by 'run.py' on {}\n".format(datetime.datetime.now()))
        logFile.write("# => DO NOT DELETE THIS FILE OR SETUP WILL BE CALLED AGAIN\n")
        logFile.flush()
        subprocess.call(['npm', 'install'], stdout=logFile)
        logFile.flush()
        logFile.write("\n# Setup completed on {}".format(datetime.datetime.now()))
    #end logFile
#end run

def build():
    import subprocess, os
    source_files = [x for x in os.listdir('.') if x.endswith('.cpp')]
    process_args = ['g++', '-std=c++14', '-lboost_system', '-lboost_filesystem', '-lpthread', '-lcryptopp', '-Wall', '-pedantic', '-Ofast', '-o', output_file_name] + source_files
    subprocess.call(process_args)
    print("Built C++ implementation as '{}'".format(output_file_name))
#end run

def run(cmd_args):
    import subprocess
    process_args = ["./{}".format(output_file_name)] + cmd_args
    subprocess.call(process_args)
#end run

if __name__=="__main__":
    import sys, os

    if os.path.basename(sys.argv[0]) == __file__:
        run(sys.argv[1:])
# end main
        